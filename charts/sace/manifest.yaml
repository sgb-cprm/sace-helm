Release "sace" does not exist. Installing it now.
NAME: sace
LAST DEPLOYED: Thu Apr 24 23:46:30 2025
NAMESPACE: sgb-sace-homolog
STATUS: pending-install
REVISION: 1
HOOKS:
---
# Source: sace/charts/geoserver/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "sace-geoserver-test-connection"
  labels:
    helm.sh/chart: geoserver-0.5.6
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "2.26.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['sace-geoserver:8080']
  restartPolicy: Never
---
# Source: sace/charts/nginx/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "sace-nginx-test-connection"
  labels:
    helm.sh/chart: nginx-0.3.0
    app.kubernetes.io/name: nginx
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "1.25.5"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['sace-nginx:8080']
  restartPolicy: Never
---
# Source: sace/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "sace-test-connection"
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['sace:8082']
  restartPolicy: Never
MANIFEST:
---
# Source: sace/charts/postgresql/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: sace-postgresql
  namespace: "sgb-sace-homolog"
  labels:
    app.kubernetes.io/instance: sace
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.4
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: sace
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: sace/charts/geoserver/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sace-geoserver
  labels:
    helm.sh/chart: geoserver-0.5.6
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "2.26.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: sace/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sace-postgresql
  namespace: "sgb-sace-homolog"
  labels:
    app.kubernetes.io/instance: sace
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.4
automountServiceAccountToken: false
---
# Source: sace/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sace-postgresql
  namespace: "sgb-sace-homolog"
  labels:
    app.kubernetes.io/instance: sace
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.4
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  password: "c2FjZQ=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: sace/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sace-branco
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    sace.sgb.gov.br/bacia: branco
type: Opaque
stringData:
  JDBC_URL: "jdbc:postgresql://sace-postgresql.sgb-sace-homolog.svc.cluster.local:5432/sace_branco"
  POSTGRES_USER: "postgres"
  POSTGRES_PASS: "postgres"
---
# Source: sace/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sace-araguaia
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    sace.sgb.gov.br/bacia: araguaia
type: Opaque
stringData:
  JDBC_URL: "jdbc:postgresql://sace-postgresql.sgb-sace-homolog.svc.cluster.local:5432/sace_araguaia"
  POSTGRES_USER: "postgres"
  POSTGRES_PASS: "postgres"
---
# Source: sace/charts/geoserver/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sace-geoserver
data:

  # TODO: Adicionar suporte a TLS, para selecionar http ou https, via ingress
  PROXY_BASE_URL: http://sace.sgb-sace-homolog.apps-crc.testing/geoserver
  GEOSERVER_CONSOLE_DISABLED: "false"
  # CSRF
  GEOSERVER_CSRF_DISABLED: "true"
  # Marlin Renderer
  GEOSERVER_DISABLE_MARLIN: "false"
  # CORS
  GEOSERVER_CORS_ALLOWED_ORIGINS: "*"
---
# Source: sace/charts/postgresql/templates/primary/extended-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sace-postgresql-extended-configuration
  namespace: "sgb-sace-homolog"
  labels:
    app.kubernetes.io/instance: sace
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.4
    app.kubernetes.io/component: primary
data:
  override.conf: |-
    log_statement = all
    log_directory = 'logs'                  # directory where log files are written,
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'        # log file name pattern,
    log_file_mode = 0660
---
# Source: sace/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sace-branco
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    sace.sgb.gov.br/bacia: branco
data:
  SACE_CONTEXT: "branco"
  JAVA_XMX: "3096"
  JAVA_XMS: "2098"
  workspaceGeoserver: "BRANCO"
  urlGeoserver: "http://sace.sgb-sace-homolog.apps-crc.testing/geoserver"
  boundMap: "new OpenLayers.Bounds(-65.000000, -2.000000, -59.000000, 6.000000)"
  ativarAgendamentos: "false"
  ativarRecuperacoes: "false"
  nomeSistema: "Bacia do Branco"
  imageDir: "/mnt/sace/data"
  urlSistema: "http://sace.sgb-sace-homolog.apps-crc.testing/branco"
immutable: false
---
# Source: sace/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sace-araguaia
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    sace.sgb.gov.br/bacia: araguaia
data:
  SACE_CONTEXT: "araguaia"
  JAVA_XMX: "3096"
  JAVA_XMS: "2098"
  workspaceGeoserver: "ARAGUAIA"
  urlGeoserver: "http://sace.sgb-sace-homolog.apps-crc.testing/geoserver"
  boundMap: "new OpenLayers.Bounds(-65.000000, -2.000000, -59.000000, 6.000000)"
  ativarAgendamentos: "false"
  ativarRecuperacoes: "false"
  nomeSistema: "Bacia do Araguaia"
  imageDir: "/mnt/sace/data"
  urlSistema: "http://sace.sgb-sace-homolog.apps-crc.testing/araguaia"
immutable: false
---
# Source: sace/templates/nginx/default-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: foo
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
data:
  default.conf: "    server {\n        listen       8080;\n        server_name  sace.sgb-sace-homolog.apps-crc.testing sace-nginx.sgb-sace-homolog.svc.cluster.local sace-nginx;\n    \n        #access_log  /var/log/nginx/host.access.log  main;\n    \n        location / {\n            root   /usr/share/nginx/html;\n            index  index.html index.htm;\n        }\n    \n        error_page  404              /404.html;\n    \n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n    \n        location = /50x.html { \n            root   /usr/share/nginx/html;\n        }\n    \n        location = resources.json {\n            add_header  Content-Type    application/json;\n        }\n        location /geoserver {\n            proxy_set_header Host $http_host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n    \n            proxy_pass http://sace-geoserver.sgb-sace-homolog.svc.cluster.local:8080/geoserver;\n        }\n    \n        location /branco/ {\n            proxy_pass http://sace-branco.sgb-sace-homolog.svc.cluster.local:8082/branco/;\n            proxy_redirect off;\n    \n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    \n        location = /branco {\n            return 301 $scheme://$host/branco/;\n        }\n    \n        location /araguaia/ {\n            proxy_pass http://sace-araguaia.sgb-sace-homolog.svc.cluster.local:8082/araguaia/;\n            proxy_redirect off;\n    \n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    \n        location = /araguaia {\n            return 301 $scheme://$host/araguaia/;\n        }\n    }"
---
# Source: sace/templates/nginx/html-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: bar
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
data:
  index.html: "    <html>\n      <head>\n        <title>sace</title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta name=\"description\" content=\"SACE - Monitoramento de bacias hidrográficas\">\n        <meta name=\"keywords\" content=\"sace, sace, sace-latest\">\n        <meta name=\"author\" content=\"SACE Team\">\n      </head>\n      <body>\n        <h1>SACE is Alive!</a>\n        <h2>Enabled instances: </h2>\n        <ul>\n          <li><a href=\"/branco\" target=\"_blank\">Bacia do Branco</a></li>\n          <li><a href=\"/araguaia\" target=\"_blank\">Bacia do Araguaia</a></li>\n        </ul>\n        <h2>Internal Geoserver Instance</h2>\n        <ul> \n          <li><a href=\"/geoserver\" target=\"_blank\">Geoserver</a></li>\n        </ul>\n      </body>\n    </html>"
  50x.html: "    <h1>50x</h1>"
  404.html: "    <h1>404</h1>"
  resources.json: "    {\n        \"name\": \"sace\",\n        \"instances\": [{\"name\":\"branco\",\"title\":\"Bacia do Branco\",\"url\":\"http://sace.sgb-sace-homolog.apps-crc.testing/branco\"},{\"name\":\"araguaia\",\"title\":\"Bacia do Araguaia\",\"url\":\"http://sace.sgb-sace-homolog.apps-crc.testing/araguaia\"}]\n    }"
---
# Source: sace/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sace-branco
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    sace.sgb.gov.br/bacia: branco
  annotations:
    helm.sh/resource-policy: keep
spec:
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  resources:
    requests:
      storage: 1Gi
---
# Source: sace/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sace-araguaia
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    sace.sgb.gov.br/bacia: araguaia
  annotations:
    helm.sh/resource-policy: keep
spec:
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  resources:
    requests:
      storage: 10Gi
---
# Source: sace/charts/geoserver/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sace-geoserver
  labels:
    helm.sh/chart: geoserver-0.5.6
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "2.26.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: tcp-8080
  selector:
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: sace
---
# Source: sace/charts/nginx/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sace-nginx
  labels:
    helm.sh/chart: nginx-0.3.0
    app.kubernetes.io/name: nginx
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "1.25.5"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/instance: sace
---
# Source: sace/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: sace-postgresql-hl
  namespace: "sgb-sace-homolog"
  labels:
    app.kubernetes.io/instance: sace
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.4
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: sace
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: sace/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: sace-postgresql
  namespace: "sgb-sace-homolog"
  labels:
    app.kubernetes.io/instance: sace
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.4
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: sace
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: sace/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sace-branco
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    sace.sgb.gov.br/bacia: branco
spec:
  type: ClusterIP
  ports:
    - port: 8082
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    sace.sgb.gov.br/bacia: branco
---
# Source: sace/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sace-araguaia
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    sace.sgb.gov.br/bacia: araguaia
spec:
  type: ClusterIP
  ports:
    - port: 8082
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    sace.sgb.gov.br/bacia: araguaia
---
# Source: sace/charts/geoserver/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sace-geoserver
  labels:
    helm.sh/chart: geoserver-0.5.6
    app.kubernetes.io/name: geoserver
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "2.26.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoserver
      app.kubernetes.io/instance: sace
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geoserver
        app.kubernetes.io/instance: sace
    spec:
      serviceAccountName: sace-geoserver
      securityContext:
        {}
      volumes:
      containers:
        - name: geoserver
          securityContext:
            {}
          image: "ndscprm/geoserver:2.24.4"
          imagePullPolicy: IfNotPresent
          ports:
            - name: tcp-8080
              containerPort: 8080
              protocol: TCP
          envFrom:
            - configMapRef:
                name: sace-geoserver 
          volumeMounts:
          livenessProbe:
            httpGet:
              port: tcp-8080
              path: /geoserver/rest/about/version
              httpHeaders:
                - name: accept
                  value: application/json
                - name: content-type
                  value: application/json
            initialDelaySeconds: 60
            timeoutSeconds: 1
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          resources:
            {}
---
# Source: sace/charts/nginx/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sace-nginx
  labels:
    helm.sh/chart: nginx-0.3.0
    app.kubernetes.io/name: nginx
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "1.25.5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
      app.kubernetes.io/instance: sace
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx
        app.kubernetes.io/instance: sace
    spec:
      serviceAccountName: default
      securityContext:
        {}
      volumes:
        
        - name: sace-nginx-html
          configMap:
            name: bar
        - name: sace-nginx-default
          configMap:
            name: foo
      containers:
        - name: nginx
          securityContext:
            {}
          image: "docker.io/nginxinc/nginx-unprivileged:1.25.5"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            
            - name: sace-nginx-html
              readOnly: true
              mountPath: /usr/share/nginx/html
            - name: sace-nginx-default
              readOnly: true
              mountPath: /etc/nginx/conf.d
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: sace/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sace-branco
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    sace.sgb.gov.br/bacia: branco
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sace
      app.kubernetes.io/instance: sace
      sace.sgb.gov.br/bacia: branco
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sace
        app.kubernetes.io/instance: sace
        sace.sgb.gov.br/bacia: branco
    spec:
      serviceAccountName: default
      securityContext:
        {}
      restartPolicy: Always
      volumes:
        - name: sace-data
          persistentVolumeClaim:
            claimName: sace-branco
      containers:
        - name: sace
          securityContext:
            {}
          image: "docker.io/cmotadev/sace:testing4"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /branco/
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          volumeMounts:
            - mountPath: /mnt/sace/data
              name: sace-data
          envFrom:
            - configMapRef:
                name: sace-branco
            - secretRef:
                name: sace-branco
          resources:
            {}
---
# Source: sace/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sace-araguaia
  labels:
    helm.sh/chart: sace-0.4.0
    app.kubernetes.io/name: sace
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
    sace.sgb.gov.br/bacia: araguaia
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sace
      app.kubernetes.io/instance: sace
      sace.sgb.gov.br/bacia: araguaia
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sace
        app.kubernetes.io/instance: sace
        sace.sgb.gov.br/bacia: araguaia
    spec:
      serviceAccountName: default
      securityContext:
        {}
      restartPolicy: Always
      volumes:
        - name: sace-data
          persistentVolumeClaim:
            claimName: sace-araguaia
      containers:
        - name: sace
          securityContext:
            {}
          image: "docker.io/cmotadev/sace:testing4"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /araguaia/
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          volumeMounts:
            - mountPath: /mnt/sace/data
              name: sace-data
          envFrom:
            - configMapRef:
                name: sace-araguaia
            - secretRef:
                name: sace-araguaia
          resources:
            {}
---
# Source: sace/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sace-postgresql
  namespace: "sgb-sace-homolog"
  labels:
    app.kubernetes.io/instance: sace
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.2.4
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: sace-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: sace
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: sace-postgresql
      labels:
        app.kubernetes.io/instance: sace
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.2.0
        helm.sh/chart: postgresql-15.2.4
        app.kubernetes.io/component: primary
      annotations:
        checksum/extended-configuration: 31c17de86ad23c35a4520db1762cc3825e577bc5dc5a7e1dda43d7da98b335e0
    spec:
      serviceAccountName: sace-postgresql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: sace
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.11.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "sace"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sace-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sace-postgresql
                  key: postgres-password
            - name: POSTGRES_DATABASE
              value: "sace"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "sace" -d "dbname=sace" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "sace" -d "dbname=sace" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/logs
              subPath: app-logs-dir
            - name: postgresql-extended-config
              mountPath: /bitnami/postgresql/conf/conf.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: postgresql-extended-config
          configMap:
            name: sace-postgresql-extended-configuration
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: sace/charts/nginx/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sace-nginx
  labels:
    helm.sh/chart: nginx-0.3.0
    app.kubernetes.io/name: nginx
    app.kubernetes.io/instance: sace
    app.kubernetes.io/version: "1.25.5"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "sace.sgb-sace-homolog.apps-crc.testing"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: sace-nginx
                port:
                  number: 8080

NOTES:
1. Get the application URL by running these commands:
  http://sace.sgb-sace-homolog.apps-crc.testing/
